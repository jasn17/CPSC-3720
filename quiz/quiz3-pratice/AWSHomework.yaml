openapi: 3.0.0
info:
  version: 1.0.0
  title: 3720 Class- Users API
  description: A users API for homework concepts

servers:
  - url: https://users.api/v1

security:
  - BasicAuth: []
paths:
  /users:
    get:
      description: Returns all users
      responses:
        '200':
          description: Successfully returned a list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  #  ----- Added line  --------------------------------
                  $ref: '#/components/schemas/User'
                  #  ---- /Added line  --------------------------------
        '400':
          #  ----- Added line  ----------------------------------------
          $ref: '#/components/responses/400Error'
          #  ---- /Added line  ----------------------------------------
    post:
      description: Post a new user
      # For most post request, this requires a request body
      requestBody:
        required: true
        # This section defines the content type and schema for a specific API response or request.
        # The "application/json" key indicates that the content type is JSON.
        # The "schema" key specifies the structure of the JSON data.
        # The "$ref" field is used to reference an existing schema definition within the OpenAPI document.
        # In this case, it points to the "User" schema defined under "#/components/schemas/User".
        # This ensures that the JSON data adheres to the structure and validation rules defined in the "User" schema.
        content:
          application/json:
            schema:
              #  ----- Added line  ------------------------------------
              $ref: '#/components/schemas/User'
              #  ---- /Added line  ------------------------------------
      responses:
        '200':
          description: Successfully created a new user
        '400':
          #  ----- Added line  ----------------------------------------
          $ref: '#/components/responses/400Error'
          #  ---- /Added line  ----------------------------------------
    patch:
      # Most of the time, this requires a request body
      description: Update a user's type
      requestBody:
        required: true
        # This YAML file defines a schema for a JSON object.
        # The schema specifies the structure and data types of the object.
        # 
        # The object contains the following properties:
          # - `id`: An integer that likely serves as a unique identifier.
          # - `updateKey`: A string that may represent the key or field to be updated.
          # - `updateValue`: A string that may represent the new value to be assigned to the key specified by `updateKey`.
        # This schema is useful for validating JSON data to ensure it adheres to the expected format.
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                    type: integer
                updateKey:
                    type: string
                updateValue:
                    type: string
      responses:
        '200':
          description: Successfully updated user
        '400':
          #  ----- Added line  ----------------------------------------
          $ref: '#/components/responses/400Error'
          #  ---- /Added line  ----------------------------------------

    delete:
      description: Delete a user using their unique id
      parameters:
        # This section defines a parameter named "id" that is expected to be passed in the query string of the request.
        # The parameter is required and should be of type integer.
        # The "in" field specifies that the parameter is expected to be in the query string of the URL.
        # The "required" field indicates that this parameter must be provided in the request.
        # The "schema" field defines the data type of the parameter, which is an integer in this case.
        - name: id
          in: query
          required: true
          schema:
            type: integer

      responses:
        '200':
          description: Successfully deleted a user by ID

        '400':
          #  ----- Added line  ----------------------------------------
          $ref: '#/components/responses/400Error'
          #  ---- /Added line  ----------------------------------------
  # This endpoint allows you to obtain information about a specific user using their unique ID.
  # The ID is passed as a path parameter in the URL.
  # The endpoint is defined as "/users/{id}", where "{id}" is a placeholder for the actual user ID.
  # The "get" method is used to retrieve information about the user.
  # The "description" field provides a brief explanation of what this endpoint does.
  # Here is an example of how you would obtain information about a user with ID 123:
  # GET /users/123
  # In this example, the ID of the user you want to retrieve is specified in the URL path.
  # The "parameters" section defines the expected input for this endpoint.
  # The "name" field specifies the name of the parameter, which is "id" in this case.
  /users/{id}:
    get:
      description: Obtain information about a user using their unique id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer

      responses:
        '200':
          description: Successfully returned a user by ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  user_type:
                    type: string

        '400':
          #  ----- Added line  ----------------------------------------
          $ref: '#/components/responses/400Error'
          #  ---- /Added line  ----------------------------------------

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic

  schemas:
    User:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
        user_type:
          type: string
          enum:
            - customer
            - admin
            - business
            - CSR


  #  ----- Added lines  ----------------------------------------
  responses:
    400Error:
      description: Invalid request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
  #  ---- /Added lines  ----
